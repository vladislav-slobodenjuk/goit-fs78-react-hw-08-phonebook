{"version":3,"file":"static/js/381.e7036333.chunk.js","mappings":"oQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,6dCDnBE,EAAY,YAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACd,EAqBM,SAASC,EAAeC,EAAMC,GACnC,IAAIC,EAAoD,kBAA3BD,EAAsCA,EAAyB,CAC1FE,cAAeF,GAEbG,EAAwBF,EAAgBC,cACxCA,OAA0C,IAA1BC,EAAmCR,EAAuBQ,EAC1EC,EAAwBH,EAAgBI,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBL,EAAgBK,oBACtCC,EA7BC,SAAkCL,GACvC,OAAO,SAAoCM,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKT,EAAcM,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,CACR,CACF,CAYkBC,CAAyBV,GACtCW,EAAoB,IAAZR,EA/Gd,SAA8BS,GAC5B,IAAIC,EACJ,MAAO,CACLC,IAAK,SAAaC,GAChB,OAAIF,GAASD,EAAOC,EAAME,IAAKA,GACtBF,EAAMG,MAGRxB,CACR,EACDyB,IAAK,SAAaF,EAAKC,GACrBH,EAAQ,CACNE,IAAKA,EACLC,MAAOA,EAEV,EACDE,WAAY,WACV,OAAOL,EAAQ,CAACA,GAAS,EAC1B,EACDM,MAAO,WACLN,OAAQO,CACT,EAEJ,CAwF6BC,CAAqBhB,GAtFnD,SAAwBF,EAASS,GAC/B,IAAIU,EAAU,GAEd,SAASR,EAAIC,GACX,IAAIQ,EAAaD,EAAQE,WAAU,SAAUX,GAC3C,OAAOD,EAAOG,EAAKF,EAAME,IAC1B,IAED,GAAIQ,GAAc,EAAG,CACnB,IAAIV,EAAQS,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQb,IAGXA,EAAMG,KACd,CAGD,OAAOxB,CACR,CAwBD,MAAO,CACLsB,IAAKA,EACLG,IAxBF,SAAaF,EAAKC,GACZF,EAAIC,KAASvB,IAEf8B,EAAQI,QAAQ,CACdX,IAAKA,EACLC,MAAOA,IAGLM,EAAQd,OAASL,GACnBmB,EAAQK,MAGb,EAaCT,WAXF,WACE,OAAOI,CACR,EAUCH,MARF,WACEG,EAAU,EACX,EAQF,CAmCgEM,CAAezB,EAASE,GAEvF,SAASwB,IACP,IAAIb,EAAQL,EAAMG,IAAIgB,WAEtB,GAAId,IAAUxB,EAAW,CAIvB,GAFAwB,EAAQnB,EAAKkC,MAAM,KAAMD,WAErB1B,EAAqB,CACvB,IAAIkB,EAAUX,EAAMO,aAChBc,EAAgBV,EAAQW,MAAK,SAAUpB,GACzC,OAAOT,EAAoBS,EAAMG,MAAOA,EACzC,IAEGgB,IACFhB,EAAQgB,EAAchB,MAEzB,CAEDL,EAAMM,IAAIa,UAAWd,EACtB,CAED,OAAOA,CACR,CAMD,OAJAa,EAASK,WAAa,WACpB,OAAOvB,EAAMQ,OACd,EAEMU,CACR,CC/ID,SAASM,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,CACf,IAAG,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,MAAsB,oBAARA,EAAqB,aAAeA,EAAIG,MAAQ,WAAa,YAAcH,CAC1F,IAAEI,KAAK,MACR,MAAM,IAAIC,MAAM,kGAAoGJ,EAAkB,IACvI,CAED,OAAOL,CACR,CAEM,SAASU,EAAsBC,GACpC,IAAK,IAAIC,EAAOnB,UAAUtB,OAAQ0C,EAAyB,IAAIZ,MAAMW,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IACpHD,EAAuBC,EAAO,GAAKrB,UAAUqB,GAG/C,IAAIC,EAAiB,WACnB,IAAK,IAAIC,EAAQvB,UAAUtB,OAAQ4B,EAAQ,IAAIE,MAAMe,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACrFlB,EAAMkB,GAASxB,UAAUwB,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBtC,GAGduC,EAAavB,EAAMT,MAQvB,GAN0B,kBAAfgC,IACTF,EAAwBE,EAExBA,EAAavB,EAAMT,OAGK,oBAAfgC,EACT,MAAM,IAAIb,MAAM,qFAAuFa,EAAa,KAKtH,IAAIC,EAAwBH,EACxBI,EAAyBD,EAAsBF,eAC/CA,OAA4C,IAA3BG,EAAoCX,EAAyBW,EAM9EC,EAAsBxB,MAAMC,QAAQmB,GAAkBA,EAAiB,CAACA,GACxErB,EAAeF,EAAgBC,GAC/B2B,EAAqBf,EAAQjB,WAAM,EAAQ,CAAC,WAG9C,OAFAyB,IAEOG,EAAW5B,MAAM,KAAMD,UAC/B,GAAEkC,OAAOF,IAENG,EAAWjB,GAAQ,WAIrB,IAHA,IAAIkB,EAAS,GACT1D,EAAS6B,EAAa7B,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAG1ByD,EAAOC,KAAK9B,EAAa5B,GAAGsB,MAAM,KAAMD,YAK1C,OADAyB,EAAcQ,EAAmBhC,MAAM,KAAMmC,EAE9C,IAeD,OAdAE,OAAOC,OAAOJ,EAAU,CACtBN,WAAYA,EACZI,mBAAoBA,EACpB1B,aAAcA,EACdiC,WAAY,WACV,OAAOf,CACR,EACDgB,eAAgB,WACd,OAAOf,CACR,EACDgB,oBAAqB,WACnB,OAAOhB,EAAkB,CAC1B,IAEIS,CACR,EAGD,OAAOb,CACR,CACM,I,IAAIA,EAAgCL,EAAsBnD,GCrGpD6E,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAAV,EACtBC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAV,EAEpBC,EAAyB1B,EACpC,CAACqB,EAAgBG,IACjB,WAAYC,GAAY,IAArBE,EAAoB,EAApBA,MACKC,EAAmBH,EAAOI,cAChC,OAAOF,EAAMF,QAAO,qBAAGjC,KAChBqC,cAAcC,SAASF,EADV,GAGrB,I,oBCHGG,EAAgB,CACpBvC,KAAM,GACNwC,OAAQ,IAGJC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1C3C,KAAM0C,EAAAA,KACHE,IAAI,EAAG,aACPC,QACC,yHACA,0IAEDC,SAAS,YACZN,OAAQE,EAAAA,KACLG,QACC,qFACA,gGAEDC,SAAS,cAGDC,EAAc,WACzB,IAAQZ,GAAUa,EAAAA,EAAAA,IAAYnB,GAAtBM,MACFc,GAAWC,EAAAA,EAAAA,MAcjB,OACE,SAAC,KAAD,CACEX,cAAeA,EACfY,iBAAkBV,EAClBW,SAhBiB,SAAC,EAAD,GAAsC,IAAnCpD,EAAkC,EAAlCA,KAAMwC,EAA4B,EAA5BA,OAAYa,EAAgB,EAAhBA,UAMxC,GALgBlB,EAAM9C,MACpB,SAAAiE,GAAO,OACLA,EAAQtD,KAAKqC,gBAAkBrC,EAAKqC,eACpCiB,EAAQd,SAAWA,CAFd,IAII,OAAOe,MAAM,GAAD,OAAIvD,EAAJ,eAAewC,EAAf,6BAEzBS,GAASO,EAAAA,EAAAA,IAAW,CAAExD,KAAMA,EAAKyD,OAAQjB,OAAAA,KACzCa,GACD,EAGC,UAKE,UAAC5G,EAAD,YACE,6BAAO,SAEL,SAAC,KAAD,CAAOiH,KAAK,OAAO1D,KAAK,aAE1B,SAAC,KAAD,CACE2D,MAAO,CAAEC,MAAO,MAAOC,SAAU,QACjCC,UAAU,MACV9D,KAAK,UAGP,6BAAO,WAEL,SAAC,KAAD,CAAO0D,KAAK,MAAM1D,KAAK,eAEzB,SAAC,KAAD,CACE2D,MAAO,CAAEC,MAAO,MAAOC,SAAU,QACjCC,UAAU,MACV9D,KAAK,YAGP,mBAAQ0D,KAAK,SAAb,SAAsB,oBAI7B,EC3EYK,EAAerH,EAAAA,GAAAA,IAAH,wY,UCKZsH,EAAS,WACpB,IAAM/B,GAASe,EAAAA,EAAAA,IAAYhB,GACrBiB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAACa,EAAD,YACE,kBAAOE,QAAQ,SAAf,SAAwB,2BACxB,kBACEC,GAAG,SACHR,KAAK,OACL1D,KAAK,SACL5B,MAAO6D,EACPkC,SAZqB,SAAC,GAA2B,IAAf/F,EAAc,EAAxBgG,OAAUhG,MACtC6E,GAASoB,EAAAA,EAAAA,GAAkBjG,GAC5B,MAcF,ECtBYkG,EAAW,SAAC,GAAuC,IAAD,IAApChB,QAAWY,EAAyB,EAAzBA,GAAIlE,EAAqB,EAArBA,KAAMwC,EAAe,EAAfA,OACxCS,GAAWC,EAAAA,EAAAA,MAMjB,OACE,2BACE,yBACGlD,EAAK,MAAE,0BAAOwC,QAEjB,mBAAQkB,KAAK,SAASa,QAAS,kBATd,SAAAL,GACnBjB,GAASuB,EAAAA,EAAAA,IAAcN,GACxB,CAOwCO,CAAaP,EAAnB,EAA/B,SAAuD,aAK5D,ECpBYQ,EAAahI,EAAAA,GAAAA,GAAH,qoBCQjBiI,EAAgB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACE,yBACE,cAAGC,UAAU,YAAb,SAA0BD,KAG/B,EAEYE,EAAc,WACzB,OAAoC9B,EAAAA,EAAAA,IAAYnB,GAAxCM,EAAR,EAAQA,MAAO4C,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,MACpBC,GAAmBjC,EAAAA,EAAAA,IAAYd,GAE/BgD,EACwB,IAA5BD,EAAiBrH,QAAiC,IAAjBuE,EAAMvE,SAAiBmH,IAAcC,EAElEG,EAAmC,IAAjBhD,EAAMvE,SAAiBmH,IAAcC,EAK7D,OACE,UAACN,EAAD,WACGO,EAAiBlF,KAAI,SAAAuD,GAAO,OAC3B,SAACgB,EAAD,CAA2BhB,QAASA,GAArBA,EAAQY,GADI,IAI5BgB,IAAiB,SAACP,EAAD,CAAeC,KAAM,kBAEtCO,IAAmB,SAACR,EAAD,CAAeC,KAAM,sBAExCI,IAAS,SAACL,EAAD,CAAeC,KAAM,wBAIpC,E,UCXD,EAtBqB,WACnB,IAAQG,GAAc/B,EAAAA,EAAAA,IAAYnB,GAA1BkD,UACF9B,GAAWC,EAAAA,EAAAA,MAMjB,OAJAkC,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,MACV,GAAE,CAACpC,KAGF,4BACE,wBAAI,eACJ,SAACF,EAAD,KAEA,wBAAI,cACJ,SAACiB,EAAD,KACA,SAACc,EAAD,IAECC,IAAa,SAACO,EAAA,EAAD,MAGnB,C","sources":["components/ContactForm/ContactForm.styled.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ListItem/ListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","Pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-content: center;\n  align-items: flex-end;\n\n  padding: 20px;\n  margin-bottom: 30px;\n\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n\n  label {\n    margin-bottom: 20px;\n  }\n\n  input {\n    margin-left: 10px;\n  }\n\n  button {\n    align-self: center;\n  }\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectfilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  ({ items }, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { StyledForm } from './ContactForm.styled';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst AddContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too short')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n      'phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const isExist = items.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n    if (isExist) return alert(`${name} or ${number} is already in contacts.`);\n\n    dispatch(addContact({ name: name.trim(), number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={AddContactSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <label>\n          Name:\n          <Field type=\"text\" name=\"name\" />\n        </label>\n        <ErrorMessage\n          style={{ color: 'red', fontSize: '14px' }}\n          component=\"div\"\n          name=\"name\"\n        />\n\n        <label>\n          Number:\n          <Field type=\"tel\" name=\"number\" />\n        </label>\n        <ErrorMessage\n          style={{ color: 'red', fontSize: '14px' }}\n          component=\"div\"\n          name=\"number\"\n        />\n\n        <button type=\"submit\">Add contact</button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledFilter = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-content: center;\n  /* align-items: center; */\n\n  margin-bottom: 20px;\n  padding: 20px;\n\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n\n  input {\n    margin-top: 10px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { StyledFilter } from './Filter.styled';\n\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setContactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = ({ target: { value } }) => {\n    dispatch(setContactsFilter(value));\n  };\n\n  return (\n    <StyledFilter>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </StyledFilter>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ListItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li>\n      <p>\n        {name}: <span>{number}</span>\n      </p>\n      <button type=\"button\" onClick={() => handleDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  padding: 20px;\n\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n\n  li {\n    display: flex;\n    justify-content: space-between;\n\n    &:not(:last-child) {\n      margin-bottom: 15px;\n    }\n\n    p {\n      display: flex;\n      justify-content: space-between;\n      flex-grow: 1;\n\n      &.emptyList {\n        justify-content: center;\n      }\n    }\n\n    span {\n      align-self: flex-end;\n    }\n  }\n\n  button {\n    margin-left: 15px;\n  }\n`;\n","import { useSelector } from 'react-redux';\n\nimport { ListItem } from './ListItem/ListItem';\nimport { StyledList } from './ContactList.styled';\n\nimport {\n  selectContacts,\n  selectfilteredContacts,\n} from 'redux/contacts/selectors';\n\nconst EmptyListItem = ({ text }) => {\n  return (\n    <li>\n      <p className=\"emptyList\">{text}</p>\n    </li>\n  );\n};\n\nexport const ContactList = () => {\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectfilteredContacts);\n\n  const noFilterMatch =\n    filteredContacts.length === 0 && items.length !== 0 && !isLoading && !error;\n\n  const noSavedContacts = items.length === 0 && !isLoading && !error;\n\n  // const showContacts =\n  //   Array.isArray(filteredContacts) && filteredContacts.length > 0;\n\n  return (\n    <StyledList>\n      {filteredContacts.map(contact => (\n        <ListItem key={contact.id} contact={contact} />\n      ))}\n\n      {noFilterMatch && <EmptyListItem text={'Nothing found'} />}\n      {/* <p className=\"emptyList\">Nothing found</p> */}\n      {noSavedContacts && <EmptyListItem text={'No saved contacts'} />}\n      {/* <p className=\"emptyList\">No saved contacts</p> */}\n      {error && <EmptyListItem text={'An Error acquired'} />}\n      {/* <p className=\"emptyList\">An Error acquired</p> */}\n    </StyledList>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { getAllContacts } from 'redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const { isLoading } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n\n      {isLoading && <Loader />}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","Form","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","selectFilter","filter","selectfilteredContacts","items","normalizedFilter","toLowerCase","includes","initialValues","number","AddContactSchema","Yup","shape","min","matches","required","ContactForm","useSelector","dispatch","useDispatch","validationSchema","onSubmit","resetForm","contact","alert","addContact","trim","type","style","color","fontSize","component","StyledFilter","Filter","htmlFor","id","onChange","target","setContactsFilter","ListItem","onClick","deleteContact","handleDelete","StyledList","EmptyListItem","text","className","ContactList","isLoading","error","filteredContacts","noFilterMatch","noSavedContacts","useEffect","getAllContacts","Loader"],"sourceRoot":""}