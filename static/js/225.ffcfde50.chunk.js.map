{"version":3,"file":"static/js/225.ffcfde50.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ListItem/ListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","Pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-content: center;\n  align-items: flex-end;\n\n  padding: 20px;\n\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n\n  label {\n    margin-bottom: 20px;\n  }\n\n  input {\n    margin-left: 10px;\n  }\n\n  button {\n    align-self: center;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\nexport const selectFilter = state => state.filter;\n\nexport const selectfilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  ({ items }, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","// import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { StyledForm } from './ContactForm.styled';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst AddContactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short').required('Requered'),\n  number: Yup.number().required(),\n});\n\nexport const ContactForm = () => {\n  // const [data, setData] = useState({ name: '', number: '' });\n  const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // const hadleInputChange = ({ target: { name, value } }) => {\n  //   setData(prev => ({ ...prev, [name]: value }));\n  // };\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    // e.preventDefault();\n\n    const isExist = items.find(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n    if (isExist) return alert(`${name} or ${number} is already in contacts.`);\n\n    dispatch(addContact({ name: name.trim(), number }));\n    // setData({ name: '', number: '' });\n    resetForm();\n  };\n\n  // const { name, number } = data;\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={AddContactSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <label>\n          Name:\n          <Field\n            type=\"text\"\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            // required\n            // value={name}\n            // onChange={hadleInputChange}\n          />\n        </label>\n        <ErrorMessage name=\"name\" />\n\n        <label>\n          Number:\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            // pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            // required\n            // value={number}\n            // onChange={hadleInputChange}\n          />\n        </label>\n        <ErrorMessage name=\"number\" />\n\n        <button type=\"submit\">Add contact</button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledFilter = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-content: center;\n  /* align-items: center; */\n\n  padding: 20px;\n\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n\n  input {\n    margin-top: 10px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { StyledFilter } from './Filter.styled';\n\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setContactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = ({ target: { value } }) => {\n    dispatch(setContactsFilter(value));\n  };\n\n  return (\n    <StyledFilter>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </StyledFilter>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ListItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li>\n      <p>\n        {name}: <span>{number}</span>\n      </p>\n      <button type=\"button\" onClick={() => handleDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n\n  padding: 20px;\n\n  background-color: white;\n  border-radius: 5px;\n  box-shadow: rgba(136, 165, 191, 0.48) 6px 2px 16px 0px,\n    rgba(255, 255, 255, 0.8) -6px -2px 16px 0px;\n\n  li {\n    display: flex;\n    justify-content: space-between;\n\n    &:not(:last-child) {\n      margin-bottom: 15px;\n    }\n\n    p {\n      display: flex;\n      justify-content: space-between;\n      flex-grow: 1;\n\n      &.emptyList {\n        justify-content: center;\n      }\n    }\n\n    span {\n      align-self: flex-end;\n    }\n  }\n\n  button {\n    margin-left: 15px;\n  }\n`;\n","import { useSelector } from 'react-redux';\n\nimport { ListItem } from './ListItem/ListItem';\nimport { StyledList } from './ContactList.styled';\n\nimport {\n  selectContacts,\n  selectfilteredContacts,\n} from 'redux/contacts/selectors';\n\nconst EmptyListItem = ({ text }) => {\n  return (\n    <li>\n      <p className=\"emptyList\">{text}</p>\n    </li>\n  );\n};\n\nexport const ContactList = () => {\n  const { items, isLoading, error } = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectfilteredContacts);\n\n  const noFilterMatch =\n    filteredContacts.length === 0 && items.length !== 0 && !isLoading && !error;\n\n  const noSavedContacts = items.length === 0 && !isLoading && !error;\n\n  // const showContacts =\n  //   Array.isArray(filteredContacts) && filteredContacts.length > 0;\n\n  return (\n    <StyledList>\n      {filteredContacts.map(contact => (\n        <ListItem key={contact.id} contact={contact} />\n      ))}\n\n      {noFilterMatch && <EmptyListItem text={'Nothing found'} />}\n      {/* <p className=\"emptyList\">Nothing found</p> */}\n      {noSavedContacts && <EmptyListItem text={'No saved contacts'} />}\n      {/* <p className=\"emptyList\">No saved contacts</p> */}\n      {error && <EmptyListItem text={'An Error acquired'} />}\n      {/* <p className=\"emptyList\">An Error acquired</p> */}\n    </StyledList>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { getAllContacts } from 'redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const { isLoading } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n\n      {isLoading && <Loader />}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","Form","selectContacts","state","contacts","selectFilter","filter","selectfilteredContacts","createSelector","items","normalizedFilter","toLowerCase","name","includes","initialValues","number","AddContactSchema","Yup","shape","min","required","ContactForm","useSelector","dispatch","useDispatch","validationSchema","onSubmit","resetForm","find","contact","alert","addContact","trim","type","title","StyledFilter","Filter","htmlFor","id","value","onChange","target","setContactsFilter","ListItem","onClick","deleteContact","handleDelete","StyledList","EmptyListItem","text","className","ContactList","isLoading","error","filteredContacts","noFilterMatch","length","noSavedContacts","map","useEffect","getAllContacts","Loader"],"sourceRoot":""}